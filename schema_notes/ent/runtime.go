// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/peanut-cc/ent_orm_notes/schema_notes/ent/group"
	"github.com/peanut-cc/ent_orm_notes/schema_notes/ent/schema"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[0].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = func() func(string) error {
		validators := groupDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescAge is the schema descriptor for age field.
	groupDescAge := groupFields[1].Descriptor()
	// group.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	group.AgeValidator = groupDescAge.Validators[0].(func(int) error)
}
