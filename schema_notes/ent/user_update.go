// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/peanut-cc/ent_orm_notes/schema_notes/ent/predicate"
	"github.com/peanut-cc/ent_orm_notes/schema_notes/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks      []Hook
	mutation   *UserMutation
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetRequiredName sets the required_name field.
func (uu *UserUpdate) SetRequiredName(s string) *UserUpdate {
	uu.mutation.SetRequiredName(s)
	return uu
}

// SetOptionalName sets the optional_name field.
func (uu *UserUpdate) SetOptionalName(s string) *UserUpdate {
	uu.mutation.SetOptionalName(s)
	return uu
}

// SetNillableOptionalName sets the optional_name field if the given value is not nil.
func (uu *UserUpdate) SetNillableOptionalName(s *string) *UserUpdate {
	if s != nil {
		uu.SetOptionalName(*s)
	}
	return uu
}

// ClearOptionalName clears the value of optional_name.
func (uu *UserUpdate) ClearOptionalName() *UserUpdate {
	uu.mutation.ClearOptionalName()
	return uu
}

// SetNilableName sets the nilable_name field.
func (uu *UserUpdate) SetNilableName(s string) *UserUpdate {
	uu.mutation.SetNilableName(s)
	return uu
}

// SetNillableNilableName sets the nilable_name field if the given value is not nil.
func (uu *UserUpdate) SetNillableNilableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetNilableName(*s)
	}
	return uu
}

// ClearNilableName clears the value of nilable_name.
func (uu *UserUpdate) ClearNilableName() *UserUpdate {
	uu.mutation.ClearNilableName()
	return uu
}

// SetNilableName2 sets the nilable_name2 field.
func (uu *UserUpdate) SetNilableName2(s string) *UserUpdate {
	uu.mutation.SetNilableName2(s)
	return uu
}

// SetNillableNilableName2 sets the nilable_name2 field if the given value is not nil.
func (uu *UserUpdate) SetNillableNilableName2(s *string) *UserUpdate {
	if s != nil {
		uu.SetNilableName2(*s)
	}
	return uu
}

// ClearNilableName2 clears the value of nilable_name2.
func (uu *UserUpdate) ClearNilableName2() *UserUpdate {
	uu.mutation.ClearNilableName2()
	return uu
}

// SetAge sets the age field.
func (uu *UserUpdate) SetAge(i int) *UserUpdate {
	uu.mutation.ResetAge()
	uu.mutation.SetAge(i)
	return uu
}

// SetNillableAge sets the age field if the given value is not nil.
func (uu *UserUpdate) SetNillableAge(i *int) *UserUpdate {
	if i != nil {
		uu.SetAge(*i)
	}
	return uu
}

// AddAge adds i to age.
func (uu *UserUpdate) AddAge(i int) *UserUpdate {
	uu.mutation.AddAge(i)
	return uu
}

// ClearAge clears the value of age.
func (uu *UserUpdate) ClearAge() *UserUpdate {
	uu.mutation.ClearAge()
	return uu
}

// SetAge2 sets the age2 field.
func (uu *UserUpdate) SetAge2(i int) *UserUpdate {
	uu.mutation.ResetAge2()
	uu.mutation.SetAge2(i)
	return uu
}

// SetNillableAge2 sets the age2 field if the given value is not nil.
func (uu *UserUpdate) SetNillableAge2(i *int) *UserUpdate {
	if i != nil {
		uu.SetAge2(*i)
	}
	return uu
}

// AddAge2 adds i to age2.
func (uu *UserUpdate) AddAge2(i int) *UserUpdate {
	uu.mutation.AddAge2(i)
	return uu
}

// ClearAge2 clears the value of age2.
func (uu *UserUpdate) ClearAge2() *UserUpdate {
	uu.mutation.ClearAge2()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.RequiredName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRequiredName,
		})
	}
	if value, ok := uu.mutation.OptionalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldOptionalName,
		})
	}
	if uu.mutation.OptionalNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldOptionalName,
		})
	}
	if value, ok := uu.mutation.NilableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNilableName,
		})
	}
	if uu.mutation.NilableNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNilableName,
		})
	}
	if value, ok := uu.mutation.NilableName2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNilableName2,
		})
	}
	if uu.mutation.NilableName2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNilableName2,
		})
	}
	if value, ok := uu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if uu.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge,
		})
	}
	if value, ok := uu.mutation.Age2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge2,
		})
	}
	if value, ok := uu.mutation.AddedAge2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge2,
		})
	}
	if uu.mutation.Age2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge2,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetRequiredName sets the required_name field.
func (uuo *UserUpdateOne) SetRequiredName(s string) *UserUpdateOne {
	uuo.mutation.SetRequiredName(s)
	return uuo
}

// SetOptionalName sets the optional_name field.
func (uuo *UserUpdateOne) SetOptionalName(s string) *UserUpdateOne {
	uuo.mutation.SetOptionalName(s)
	return uuo
}

// SetNillableOptionalName sets the optional_name field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOptionalName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOptionalName(*s)
	}
	return uuo
}

// ClearOptionalName clears the value of optional_name.
func (uuo *UserUpdateOne) ClearOptionalName() *UserUpdateOne {
	uuo.mutation.ClearOptionalName()
	return uuo
}

// SetNilableName sets the nilable_name field.
func (uuo *UserUpdateOne) SetNilableName(s string) *UserUpdateOne {
	uuo.mutation.SetNilableName(s)
	return uuo
}

// SetNillableNilableName sets the nilable_name field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNilableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNilableName(*s)
	}
	return uuo
}

// ClearNilableName clears the value of nilable_name.
func (uuo *UserUpdateOne) ClearNilableName() *UserUpdateOne {
	uuo.mutation.ClearNilableName()
	return uuo
}

// SetNilableName2 sets the nilable_name2 field.
func (uuo *UserUpdateOne) SetNilableName2(s string) *UserUpdateOne {
	uuo.mutation.SetNilableName2(s)
	return uuo
}

// SetNillableNilableName2 sets the nilable_name2 field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNilableName2(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNilableName2(*s)
	}
	return uuo
}

// ClearNilableName2 clears the value of nilable_name2.
func (uuo *UserUpdateOne) ClearNilableName2() *UserUpdateOne {
	uuo.mutation.ClearNilableName2()
	return uuo
}

// SetAge sets the age field.
func (uuo *UserUpdateOne) SetAge(i int) *UserUpdateOne {
	uuo.mutation.ResetAge()
	uuo.mutation.SetAge(i)
	return uuo
}

// SetNillableAge sets the age field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAge(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAge(*i)
	}
	return uuo
}

// AddAge adds i to age.
func (uuo *UserUpdateOne) AddAge(i int) *UserUpdateOne {
	uuo.mutation.AddAge(i)
	return uuo
}

// ClearAge clears the value of age.
func (uuo *UserUpdateOne) ClearAge() *UserUpdateOne {
	uuo.mutation.ClearAge()
	return uuo
}

// SetAge2 sets the age2 field.
func (uuo *UserUpdateOne) SetAge2(i int) *UserUpdateOne {
	uuo.mutation.ResetAge2()
	uuo.mutation.SetAge2(i)
	return uuo
}

// SetNillableAge2 sets the age2 field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAge2(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAge2(*i)
	}
	return uuo
}

// AddAge2 adds i to age2.
func (uuo *UserUpdateOne) AddAge2(i int) *UserUpdateOne {
	uuo.mutation.AddAge2(i)
	return uuo
}

// ClearAge2 clears the value of age2.
func (uuo *UserUpdateOne) ClearAge2() *UserUpdateOne {
	uuo.mutation.ClearAge2()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.RequiredName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldRequiredName,
		})
	}
	if value, ok := uuo.mutation.OptionalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldOptionalName,
		})
	}
	if uuo.mutation.OptionalNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldOptionalName,
		})
	}
	if value, ok := uuo.mutation.NilableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNilableName,
		})
	}
	if uuo.mutation.NilableNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNilableName,
		})
	}
	if value, ok := uuo.mutation.NilableName2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNilableName2,
		})
	}
	if uuo.mutation.NilableName2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldNilableName2,
		})
	}
	if value, ok := uuo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge,
		})
	}
	if uuo.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge,
		})
	}
	if value, ok := uuo.mutation.Age2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge2,
		})
	}
	if value, ok := uuo.mutation.AddedAge2(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldAge2,
		})
	}
	if uuo.mutation.Age2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldAge2,
		})
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
